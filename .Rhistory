library(ggmap)
library(ggplot2)
data(GNI2014)
library(treemap)
data(GNI2014)
View(GNI2014)
head(GNI2014)
register_google(key = 'AIzaSyDhEDE1TNVNPWmRjgTClt9RM5tAjydGWtc')
gc <- geocode("Europe")
View(gc)
View(gc)
cen <- as.numeric(gc)
map <- get_googlemap(center = cen,
maptype ="roadmap",
marker = gc)
ggmap(map)
map <- get_googlemap(center = cen,
maptype ="roadmap",
zoom = 4
marker = gc)
map <- get_googlemap(center = cen,
maptype ="roadmap",
zoom = 4,
marker = gc)
ggmap(map)
gmap <- ggmap(map)
df<-data(GNI2014)
gmap+geom_point(data = GNI2014, # 원그리기
aes(x=long, y=lat, size=population), # size = population
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
gmap <- ggmap(map)
gmap+geom_point(data = GNI2014, # 원그리기
aes(x=long, y=lat, size=population), # size = population
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
map <- get_googlemap(center = cen,
maptype ="roadmap",
zoom = 4,
marker = gc)
gmap <- ggmap(map)
gmap+geom_point(data = GNI2014, # 원그리기
aes(x=long, y=lat, size=population), # size = population
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
head(GNI2014)
df <- data.frame(GNI2014$country, GNI2014$continent)
View(df)
library(ggmap)
library(ggplot2)
library(treemap)
data(GNI2014)
register_google(key = 'AIzaSyDhEDE1TNVNPWmRjgTClt9RM5tAjydGWtc')
gc <- geocode("Europe")
df <- data.frame(GNI2014$country, GNI2014$continent)
cen <- as.numeric(gc)
map <- get_googlemap(center = cen,
maptype ="roadmap",
zoom = 4,
marker = gc)
gmap <- ggmap(map)
View(df)
head(GNI2014)
loc <- df[df$GNI2014.continent == "Europe"]
df <- data.frame(GNI2014$country, GNI2014$continent, GNI2014$population)
loc <- df[df$GNI2014.continent == "Europe"]
View(df[df$GNI2014.continent == "Europe"])
View(df[GNI2014.continent == "Europe"])
View(df)
View(df)
View(df)
View(df$GNI2014.continent)
View(df$GNI2014.continent=="Europe")
View(df[df$GNI2014.continent == "Europe",])
loc <- View(df[df$GNI2014.continent == "Europe",])
loc <- data.frame(df[df$GNI2014.continent == "Europe",])
View(loc)
View(df[df$GNI2014.continent == "Europe",])
n(df[df$GNI2014.continent == "Europe",])
n(View(df[df$GNI2014.continent == "Europe",]))
nrow(View(df[df$GNI2014.continent == "Europe",]))
gc_eu <- geocode(loc$GNI2014.country)
View(gc_eu)
View(gc_eu)
df_eu <- cbind(loc, gc_eu)
View(df_eu)
View(df_eu)
gmap+geom_point(data = df_eu, # 원그리기
aes(x=long, y=lat, size=population), # size = population
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
map <- get_googlemap(center = cen,
maptype ="roadmap",
zoom = 4,
marker = gc)
gmap <- ggmap(map)
ggmap(map)
gmap <- ggmap(map)
gmap+geom_point(data = df_eu, # 원그리기
aes(x=long, y=lat, size=population), # size = population
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
View(gc_eu)
View(df_eu)
gmap+geom_point(data = df_eu, # 원그리기
aes(x=long, y=lat, size=GNI2014.population), # size = population
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
gmap+geom_point(data = df_eu, # 원그리기
aes(x=lon, y=lat, size=GNI2014.population), # size = population
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
gmap+geom_point(data = df, # 원그리기
aes(x=long, y=lat, size=mag*1.3),
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
gmap+geom_point(data = df, # 원그리기
aes(x=long, y=lat, size=mag*1.3),
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
gmap+geom_point(data = df_eu, # 원그리기
aes(x=lon, y=lat, size=GNI2014.population*1.3), # size = population
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
gmap+geom_point(data = df_eu, # 원그리기
aes(x=lon, y=lat, size=GNI2014.population*1.6), # size = population
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
gmap+geom_point(data = df_eu, # 원그리기
aes(x=lon, y=lat, size=GNI2014.population*2), # size = population
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
gmap+geom_point(data = df_eu, # 원그리기
aes(x=lon, y=lat, size=GNI2014.population), # size = population
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
text(st$Income, st$Illiteracy,
st$state.name,
cex = 0.8,
col = "black")
source('~/.active-rstudio-document', echo=TRUE)
gmap+geom_point(data = df_eu, # 원그리기
aes(x=lon, y=lat, size=GNI2014.population), # size = population
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
gmap+geom_point(data = df_eu, # 원그리기
aes(x=lon, y=lat, size=GNI2014.population), # size = population
color = "green"
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
gmap+geom_point(data = df_eu, # 원그리기
aes(x=lon, y=lat, size=GNI2014.population), # size = population
color = "green",
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
map <- get_googlemap(center = cen,
maptype ="roadmap",
zoom = 5,
marker = gc)
gmap <- ggmap(map)
gmap+geom_point(data = df_eu, # 원그리기
aes(x=lon, y=lat, size=GNI2014.population), # size = population
color = "green",
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
map <- get_googlemap(center = cen,
maptype ="roadmap",
zoom = 4,
marker = gc)
gmap <- ggmap(map)
gmap+geom_point(data = df_eu, # 원그리기
aes(x=lon, y=lat, size=GNI2014.population), # size = population
color = "green",
alpha=0.5)+theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("KoNLP")
install.packages("R0")
version()
R.version()
R.version()
R.ve
R.version()
install.packages("KoNLP")
library(KoNLP)
library(KoNLP)
(KoNLP)
library(KoNLP)
useSejongdic()
install.packages("https://cran.r-project.org/src/contrib/Archive/KoNLP/KoNLP")
R.version()
R.Version()
.libPaths()
install.packages("rtools")
install.packages("multilinguer")
library(multilinguer)
install_jdk()
install.packages('rJava', type = 'binary');library(rJava);.jinit();rstudioapi::restartSession()
install.packages(c("hash", "tau", "Sejong", "RSQLite", "devtools", "bit", "rex", "lazyeval", "htmlwidgets", "crosstalk", "promises", "later", "sessioninfo", "xopen", "bit64", "blob", "DBI", "memoise", "plogr", "covr", "DT", "rcmdcheck", "rversions"), type = "binary")
install.packages("remotes")
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
install.packages('devtools')
devtools::install_github('haven-jeon/KoNLP')
library(KoNLP)
useSejongdic()
devtools::install_github('haven-jeon/NIADic/NIADic', build_vignettes = TRUE)
buildDictionary(ext_dic = "woorimalsam")
install.packages("roxygen2")
install.packages("rJava")
install.packages("memoise")
install.packages('stringr')
library(remotes)
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
library(multilinguer)
install_jdk()
install.packages('rJava', type = 'binary');library(rJava);.jinit();rstudioapi::restartSession()
# download 177.9 MB & install.packages('jJava')
# into ‘D:/LeeSH/R/win-library/4.0’
install.packages(c("hash", "tau", "Sejong", "RSQLite",
"devtools", "bit", "rex", "lazyeval",
"htmlwidgets", "crosstalk", "promises",
"later", "sessioninfo", "xopen",
"bit64", "blob", "DBI", "memoise",
"plogr", "covr", "DT", "rcmdcheck",
"rversions"), type = "binary")
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
library(KoNLP)
# from github
install.packages('devtools')
devtools::install_github('haven-jeon/KoNLP')
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
install.packages("backports")
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
# install.packages("multilinguer")
library(multilinguer)
has_conda()
install_conda()
install.packages("reticulate")
library(reticulate)
install_conda() #Please install reticulate(>= 1.14)
install_miniconda()
# test whether conda installed well
remotes::install_github("haven-jeon/KoSpacing")
# test result : OK
library(KoSpacing)
# test result : OK
library(KoSpacing)
library(hashmap)
library(wordcloud)
library(KoNLP)
useSejongdic()
.libPaths()
library(wordcloud)
library(RColorBrewer)
library(KoNLP)
useSejongdic()
library(KoNLP)
useSejongdic()
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
library(KoNLP)
library(backports)
library(multilinguer)
useSejongdic()
library(c(rJava, memoise, stringr))
library(rJava)
library(memoise)
library(stringr)
library(devtools)
useSejongdic()
# When error : 함수 "useSejongdic"를 찾을 수 없습니다
useNIADic()
library(vctrs)
install.packages("vctrs")
install.packages("vctrs")
useNIADic()
useSejongdic()
library(KoNLP)
useNIADic()
install.packages("rlang")
install.packages("rlang")
useNIADic()
library(KoNLP)
library(rlang)
.libPaths()
install.packages("rlang")
install.packages("rlang")
library(wordcloud)
library(RColorBrewer)
library(KoNLP)
useSejongdic()
# When error : 함수 "useSejongdic"를 찾을 수 없습니다
useNIADic()
useSejongdic()
useSystemDic()
library(KoNLP)
# When error : 함수 "useSejongdic"를 찾을 수 없습니다
useNIADic()
useSejongdic()
useSejongDic()
useSystemDic()
pal2 <- brewer.pal(8, "Dark2")
buildDictionary(ext_dic = "woorimalsam")
text <- readLines(file.choose())
noun <- sapply(text, extractNoun, USE.NAMES = F)
#추출된 명사 통합
noun2 <- unlist(noun)
# 단어 빈도수 계산
wordcount <- table(noun2)
noun2
View(noun)
wordcount
temp <- sort(wordcount, decreasing = T)[1:10]
temp
temp <- temp[-1] # del blank
temp
barplot(temp, las = 2, names.arg = names(temp),
col = "lightblue",
main = "Most frequent words",
ylab = "Word frequencies")
wordcloud(names(wordcount),
freq = wordcount, # 단어 빈도
scale = c(6, 0.7),
min.freq = 3, #출력될 단어의 최소 빈도
random.order = F, # F : 빈도크면 중앙배치
rot.per = .1, # 90도 회전 단어 비율
colors = pal2)
